# ----------------------------------------------------------------------------
# Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------
"""ingestion_errors_model_id

Revision ID: 70ea0f70dca5
Revises: 4041ff3eab58
Create Date: 2023-06-16 9:24:51.622956

"""
import logging

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '70ea0f70dca5'
down_revision = '4041ff3eab58'
branch_labels = None
depends_on = None

log = logging.getLogger("app")

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('ingestion_errors', sa.Column('model_id', sa.Integer(), nullable=True))
    op.alter_column('ingestion_errors', 'model_version_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_index(op.f('ix_ingestion_errors_model_id'), 'ingestion_errors', ['model_id'], unique=False)
    op.create_index(op.f('ix_ingestion_errors_model_version_id'), 'ingestion_errors', ['model_version_id'], unique=False)
    op.create_foreign_key(None, 'ingestion_errors', 'models', ['model_id'], ['id'], onupdate='RESTRICT', ondelete='CASCADE')
    # ### end Alembic commands ###

    log.info("before running update statement to update the new model_id column in ingestion_errors table")
    op.execute(sa.text("""
        UPDATE ingestion_errors AS i
        SET model_id = m.model_id
        FROM model_versions AS m
        WHERE m.id = i.model_version_id 
    """))
    log.info("after running update statement to update the new model_id column in ingestion_errors table")


def downgrade() -> None:
    delete_statement = f"DELETE FROM ingestion_errors WHERE model_version_id IS NULL"
    log.warning(f"before running {delete_statement}")
    conn = op.get_bind()
    result = conn.execute(sa.text(f"{delete_statement}"))
    deleted_rows = result.rowcount
    log.warning(f"after running {delete_statement}, deleted rows: {deleted_rows}")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ingestion_errors_model_version_id'), table_name='ingestion_errors')
    op.drop_index(op.f('ix_ingestion_errors_model_id'), table_name='ingestion_errors')
    op.alter_column('ingestion_errors', 'model_version_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('ingestion_errors', 'model_id')
    # ### end Alembic commands ###
