# ----------------------------------------------------------------------------
# Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------

"""rename alerts and events

Revision ID: ad67b0cf252f
Revises: 47b0e3008c9d
Create Date: 2022-08-09 16:15:29.176750

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy import Text
from sqlalchemy.dialects import postgresql

revision = 'ad67b0cf252f'
down_revision = '47b0e3008c9d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    from deepchecks_monitoring.schema_models.pydantic_type import PydanticType
    op.create_table('alert_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('check_id', sa.Integer(), nullable=True),
    sa.Column('data_filters', PydanticType(astext_type=Text()), nullable=True),
    sa.Column('condition', PydanticType(astext_type=Text()), nullable=True),
    sa.Column('lookback', sa.Integer(), nullable=True),
    sa.Column('repeat_every', sa.Integer(), nullable=False),
    sa.Column('alert_severity', postgresql.ENUM(name='alertseverity', create_type=False), nullable=False),
    sa.Column('last_run', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['check_id'], ['checks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('events')
    op.add_column('alerts', sa.Column('failed_values', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('alerts', sa.Column('alert_rule_id', sa.Integer(), nullable=False))
    op.add_column('alerts', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('alerts', sa.Column('start_time', sa.DateTime(timezone=True), nullable=False))
    op.add_column('alerts', sa.Column('end_time', sa.DateTime(timezone=True), nullable=False))
    op.drop_constraint('alerts_check_id_fkey', 'alerts', type_='foreignkey')
    op.create_foreign_key(None, 'alerts', 'alert_rules', ['alert_rule_id'], ['id'])
    op.drop_column('alerts', 'description')
    op.drop_column('alerts', 'alert_rule')
    op.drop_column('alerts', 'name')
    op.drop_column('alerts', 'check_id')
    op.drop_column('alerts', 'repeat_every')
    op.drop_column('alerts', 'lookback')
    op.drop_column('alerts', 'alert_severity')
    op.drop_column('alerts', 'data_filters')
    op.drop_column('alerts', 'last_run')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('alerts', sa.Column('last_run', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('alerts', sa.Column('data_filters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('alerts', sa.Column('alert_severity', postgresql.ENUM('LOW', 'MID', 'HIGH', 'CRITICAL', name='alertseverity'), autoincrement=False, nullable=False))
    op.add_column('alerts', sa.Column('lookback', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('alerts', sa.Column('repeat_every', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('alerts', sa.Column('check_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('alerts', sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('alerts', sa.Column('alert_rule', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('alerts', sa.Column('description', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'alerts', type_='foreignkey')
    op.create_foreign_key('alerts_check_id_fkey', 'alerts', 'checks', ['check_id'], ['id'])
    op.drop_column('alerts', 'end_time')
    op.drop_column('alerts', 'start_time')
    op.drop_column('alerts', 'created_at')
    op.drop_column('alerts', 'alert_rule_id')
    op.drop_column('alerts', 'failed_values')
    op.create_table('events',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('failed_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('alert_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], name='events_alert_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='events_pkey')
    )
    op.drop_table('alert_rules')
    # ### end Alembic commands ###
