# ----------------------------------------------------------------------------
# Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------
"""added_alert_value

Revision ID: 59e285f86ad1
Revises: d2fd35a0db92
Create Date: 2022-11-13 17:52:34.733595

"""
import sqlalchemy as sa
from alembic import op

from deepchecks_monitoring.schema_models.alert import Alert

# revision identifiers, used by Alembic.
revision = '59e285f86ad1'
down_revision = 'd2fd35a0db92'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    # Select all existing failed_values that need migrating.
    results = connection.execute(sa.select([
        Alert.id,
        Alert.failed_values,
    ])).fetchall()
    # Iterate over all selected data tuples.
    for id_, failed_values in results:
        # convert failed_values to new format (add default value 0).
        for ver, values in failed_values.items():
            failed_values[ver] = {value: 0 for value in values}
        # Update the new columns.
        connection.execute(Alert.__table__.update().where(Alert.id == id_).values(
            failed_values=failed_values,
        ))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    # Select all existing failed_values that need migrating.
    results = connection.execute(sa.select([
        Alert.id,
        Alert.failed_values,
    ])).fetchall()
    sa.Table()
    # Iterate over all selected data tuples.
    for id_, failed_values in results:
        # convert failed_values to new format (use only the keys).
        for ver, values in failed_values.items():
            failed_values[ver] = list(values.keys())
        # Update the new columns.
        connection.execute(Alert.__table__.update().where(Alert.id == id_).values(
            failed_values=failed_values,
        ))
    # ### end Alembic commands ###
