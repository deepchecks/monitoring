# ----------------------------------------------------------------------------
# Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------
"""model_members

Revision ID: 1b0028e8c1e1
Revises: 021d60e962f4
Create Date: 2023-05-22 19:52:54.137225

"""
import sqlalchemy as sa
from alembic import context, op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1b0028e8c1e1'
down_revision = '021d60e962f4'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'model_id')
    )
    schema_name = context.get_tag_argument()
    org_id = op.get_bind().execute(sa.text(f"SELECT id FROM public.organizations where schema_name = '{schema_name}'")).first()
    if org_id is not None:
        select = f"SELECT id FROM public.users where organization_id = {org_id[0]}"
        user_rows = op.get_bind().execute(sa.text(select)).fetchall()
        select = "SELECT id FROM models"
        model_rows = op.get_bind().execute(sa.text(select)).fetchall()
        for user_row in user_rows:
            for model_row in model_rows:
                op.execute(f"INSERT INTO model_members (user_id, model_id) values ({user_row['id']}, {model_row['id']})")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('model_members')
    # ### end Alembic commands ###
