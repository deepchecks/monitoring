# ----------------------------------------------------------------------------
# Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------
"""data_ingestion_alert

Revision ID: e8cb07203dd5
Revises: 1b0028e8c1e1
Create Date: 2023-05-29 16:21:28.896406

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e8cb07203dd5'
down_revision = '1b0028e8c1e1'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    from deepchecks_monitoring.schema_models.pydantic_type import PydanticType
    op.create_table('data_ingestion_alert_rules',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String, nullable=False),
    sa.Column('condition', PydanticType(astext_type=sa.Text()), nullable=True),
    sa.Column('alert_severity', postgresql.ENUM(name='alertseverity', create_type=False), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('frequency', postgresql.ENUM(name='frequency', create_type=False), nullable=False),
    sa.Column('alert_type', sa.Enum('SAMPLE_COUNT', 'LABEL_COUNT', 'LABEL_RATIO', name='alertruletype'), nullable=False),
    sa.Column('latest_schedule', sa.DateTime(timezone=True), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_data_ingestion_alert_rules_alert_severity'), 'data_ingestion_alert_rules', ['alert_severity'], unique=False)
    op.add_column('data_ingestion_alerts', sa.Column('value', sa.Float(), nullable=True))
    op.add_column('data_ingestion_alerts', sa.Column('alert_rule_id', sa.Integer(), nullable=False))
    op.create_index(op.f('ix_data_ingestion_alerts_end_time'), 'data_ingestion_alerts', ['end_time'], unique=False)
    op.create_index(op.f('ix_data_ingestion_alerts_resolved'), 'data_ingestion_alerts', ['resolved'], unique=False)
    op.create_index(op.f('ix_data_ingestion_alerts_start_time'), 'data_ingestion_alerts', ['start_time'], unique=False)
    op.drop_constraint('data_ingestion_alerts_model_id_fkey', 'data_ingestion_alerts', type_='foreignkey')
    op.create_foreign_key(None, 'data_ingestion_alerts', 'data_ingestion_alert_rules', ['alert_rule_id'], ['id'], onupdate='RESTRICT', ondelete='CASCADE')
    op.drop_column('data_ingestion_alerts', 'label_count')
    op.drop_column('data_ingestion_alerts', 'label_ratio')
    op.drop_column('data_ingestion_alerts', 'model_id')
    op.drop_column('data_ingestion_alerts', 'sample_count')
    op.drop_column('models', 'data_ingestion_alert_label_count')
    op.drop_column('models', 'data_ingestion_alert_latest_schedule')
    op.drop_column('models', 'data_ingestion_alert_frequency')
    op.drop_column('models', 'data_ingestion_alert_label_ratio')
    op.drop_column('models', 'data_ingestion_alert_sample_count')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('models', sa.Column('data_ingestion_alert_sample_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('models', sa.Column('data_ingestion_alert_label_ratio', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('models', sa.Column('data_ingestion_alert_frequency', postgresql.ENUM('HOUR', 'DAY', 'WEEK', 'MONTH', name='frequency'), autoincrement=False, nullable=False))
    op.add_column('models', sa.Column('data_ingestion_alert_latest_schedule', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.add_column('models', sa.Column('data_ingestion_alert_label_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('data_ingestion_alerts', sa.Column('sample_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('data_ingestion_alerts', sa.Column('model_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('data_ingestion_alerts', sa.Column('label_ratio', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('data_ingestion_alerts', sa.Column('label_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'data_ingestion_alerts', type_='foreignkey')
    op.create_foreign_key('data_ingestion_alerts_model_id_fkey', 'data_ingestion_alerts', 'models', ['model_id'], ['id'], onupdate='RESTRICT', ondelete='CASCADE')
    op.drop_index(op.f('ix_data_ingestion_alerts_start_time'), table_name='data_ingestion_alerts')
    op.drop_index(op.f('ix_data_ingestion_alerts_resolved'), table_name='data_ingestion_alerts')
    op.drop_index(op.f('ix_data_ingestion_alerts_end_time'), table_name='data_ingestion_alerts')
    op.drop_column('data_ingestion_alerts', 'alert_rule_id')
    op.drop_column('data_ingestion_alerts', 'value')
    op.drop_index(op.f('ix_data_ingestion_alert_rules_alert_severity'), table_name='data_ingestion_alert_rules')
    op.drop_table('data_ingestion_alert_rules')
    # ### end Alembic commands ###
