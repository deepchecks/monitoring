# ----------------------------------------------------------------------------
# Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------
"""added webhooks table

Revision ID: 4ba6a640c364
Revises: 254559c8d23d
Create Date: 2022-11-29 17:54:22.559173
"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4ba6a640c364'
down_revision = '254559c8d23d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    webhookkind = sa.Enum('STANDART', 'PAGER_DUTY', name='webhookkind')
    webhookhttpmethod = sa.Enum('GET', 'POST', name='webhookhttpmethod')

    op.create_table('alert_webhooks',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=False),
        sa.Column('kind', webhookkind, nullable=False),
        sa.Column('http_url', sa.String(), nullable=False),
        sa.Column('http_method', webhookhttpmethod, nullable=False),
        sa.Column('http_headers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('latest_execution_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('latest_execution_status', postgresql.JSONB(), nullable=True),
        sa.Column('additional_arguments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.CheckConstraint("JSONB_TYPEOF(http_headers) = 'object'", name='headers_value_correctness'),
        sa.CheckConstraint("\n            JSONB_TYPEOF(additional_arguments) = 'object'\n            AND CASE\n                WHEN kind = 'STANDART' THEN\n                    TRUE\n                WHEN kind = 'PAGER_DUTY' THEN\n                    additional_arguments ? 'routing_key'\n                    AND JSONB_TYPEOF(additional_arguments -> 'routing_key') = 'string'\n                    AND additional_arguments ? 'group'\n                    AND JSONB_TYPEOF(additional_arguments -> 'group') = 'string'\n                    AND additional_arguments ? 'class'\n                    AND JSONB_TYPEOF(additional_arguments -> 'class') = 'string'\n                ELSE\n                    FALSE\n            END\n            ", name='additional_arguments_value_correctness'),
        sa.CheckConstraint("\n            JSONB_TYPEOF(latest_execution_status) = 'object'\n            AND latest_execution_status ? 'status'\n            AND latest_execution_status ? 'reason'\n            AND latest_execution_status ? 'message'\n            AND JSONB_TYPEOF(latest_execution_status -> 'status') = ANY(ARRAY['string', 'number'])\n            AND JSONB_TYPEOF(latest_execution_status -> 'reason') = 'string'\n            AND JSONB_TYPEOF(latest_execution_status -> 'message') = 'string'\n            ", name='execution_status_value_correctness'),
        sa.PrimaryKeyConstraint('id'),
    )

    alertseverity = sa.Enum('LOW', 'MID', 'HIGH', 'CRITICAL', name='alertseverity')
    alertseverity.create(op.get_bind(), checkfirst=True)
    op.add_column('alert_webhooks', sa.Column('notification_levels', sa.ARRAY(alertseverity), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('alert_webhooks')
    op.execute("DROP TYPE webhookhttpmethod")
    op.execute("DROP TYPE webhookkind")
    # ### end Alembic commands ###
