# ----------------------------------------------------------------------------
# Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------

"""create initial models

Revision ID: fb9160d139d5
Revises:
Create Date: 2022-07-24 13:49:39.616890

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

import deepchecks_monitoring

# revision identifiers, used by Alembic.
revision = 'fb9160d139d5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('task_type', sa.Enum('REGRESSION', 'CLASSIFICATION', name='tasktype'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('checks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('model_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('monitor_json_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('reference_json_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('non_features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('feature_importance', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('alerts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('check_id', sa.Integer(), nullable=True),
    sa.Column('data_filter', deepchecks_monitoring.schema_models.pydantic_type.PydanticType(astext_type=sa.Text()), nullable=True),
    sa.Column('alert_rule', deepchecks_monitoring.schema_models.pydantic_type.PydanticType(astext_type=sa.Text()), nullable=True),
    sa.Column('lookback', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['check_id'], ['checks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('alerts')
    op.drop_table('model_versions')
    op.drop_table('checks')
    op.drop_table('models')
    # ### end Alembic commands ###
