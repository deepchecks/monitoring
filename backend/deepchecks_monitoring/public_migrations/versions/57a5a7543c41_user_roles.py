"""user_roles

Revision ID: 57a5a7543c41
Revises: aa3745061b7d
Create Date: 2023-05-14 16:27:17.367936

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = '57a5a7543c41'
down_revision = 'aa3745061b7d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('role', sa.Enum('OWNER', 'ADMIN', name='roleenum'), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], onupdate='RESTRICT', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('user_id', 'role', name='user_role_uniqueness'),
                    schema='public'
                    )
    op.execute("INSERT INTO roles (user_id, role) select users.id, 'ADMIN' from users where users.is_admin")

    # set the first user who isn't a deepchecks user to owner (if we can an admin too)
    select = "SELECT DISTINCT ON (organization_id) id FROM public.users order by organization_id, is_admin desc, email like '%@deepchecks.com', created_at"
    rows = op.get_bind().execute(sa.text(select)).fetchall()
    for row in rows:
        op.execute(f"INSERT INTO roles (user_id, role) values ({row['id']}, 'OWNER')")

    op.drop_column('users', 'is_admin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.text('false'), nullable=False))
    op.execute("UPDATE users set is_admin = true FROM users U, roles where U.id = roles.user_id AND (roles.role = 'ADMIN' or roles.role = 'OWNER')")
    op.drop_table('roles', schema='public')
    op.execute("DROP TYPE roleenum")
    # ### end Alembic commands ###
