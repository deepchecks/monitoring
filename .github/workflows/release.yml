# ----------------------------------------------------------------------------
# Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------
#
name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  DISABLE_DEEPCHECKS_ANONYMOUS_TELEMETRY: "true"

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!github.event.pull_request.draft"
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Configure AWS credentials (Public)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Set TAG env var
        run: |
          echo "TAG=$(echo -n "${{ github.event.ref }}" | cut -d '/' -f3)" >> $GITHUB_ENV
      - name: Tag image as latest-release
        run: |
          docker buildx imagetools create \
            --tag ${{ secrets.MON_IMAGE_NAME }}:$(echo -n "${{ github.event.ref }}" | cut -d '/' -f3) \
            --tag ${{ secrets.PUBLIC_IMAGE_NAME }}:$(echo -n "${{ github.event.ref }}" | cut -d '/' -f3) \
            --tag ${{ secrets.PUBLIC_IMAGE_NAME }}:latest-release \
            ${{ secrets.MON_IMAGE_NAME }}:${{ github.sha }}
      - name: Logout from Amazon ECR
        if: always()
        run: |
          docker logout ${{ steps.login-ecr.outputs.registry }}
          docker logout ${{ steps.login-ecr-public.outputs.registry }}

  update-demo-task-definition:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition mon-commercial-staging --query taskDefinition > task-definition.json
      - name: Set TAG env var
        run: |
          echo "TAG=$(echo -n "${{ github.event.ref }}" | cut -d '/' -f3)" >> $GITHUB_ENV
      - name: Fill in the new image ID in the Amazon ECS task definition - app
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app
          image: ${{ secrets.MON_IMAGE_NAME }}:${{ env.TAG }}
      - name: Fill in the new image ID in the Amazon ECS task definition - alert-scheduler
        id: render-alert-scheduler-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          container-name: alert-scheduler
          image: ${{ secrets.MON_IMAGE_NAME }}:${{ env.TAG }}
      - name: Fill in the new image ID in the Amazon ECS task definition - task queuer
        id: render-task-queuer-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-alert-scheduler-container.outputs.task-definition }}
          container-name: task-queuer
          image: ${{ secrets.MON_IMAGE_NAME }}:${{ env.TAG }}
      - name: Fill in the new image ID in the Amazon ECS task definition - task runner
        id: render-task-runner-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-queuer-container.outputs.task-definition }}
          container-name: task-runner
          image: ${{ secrets.MON_IMAGE_NAME }}:${{ env.TAG }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-runner-container.outputs.task-definition }}
          service: demo
          cluster: DevMonitoring
